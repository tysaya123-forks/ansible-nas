"use strict";(self.webpackChunkansible_nas=self.webpackChunkansible_nas||[]).push([[8908],{2552:(e,s,n)=>{n.r(s),n.d(s,{assets:()=>d,contentTitle:()=>a,default:()=>p,frontMatter:()=>o,metadata:()=>r,toc:()=>c});var t=n(5893),i=n(1151);const o={title:"Apcupsd"},a=void 0,r={id:"applications/system-tools/apcupsd",title:"Apcupsd",description:"Homepage//www.apcupsd.org/",source:"@site/docs/applications/system-tools/apcupsd.md",sourceDirName:"applications/system-tools",slug:"/applications/system-tools/apcupsd",permalink:"/docs/applications/system-tools/apcupsd",draft:!1,unlisted:!1,editUrl:"https://github.com/davestephens/ansible-nas/tree/main/website/docs/applications/system-tools/apcupsd.md",tags:[],version:"current",frontMatter:{title:"Apcupsd"},sidebar:"tutorialSidebar",previous:{title:"System Tools",permalink:"/docs/category/system-tools"},next:{title:"Cloud Commander",permalink:"/docs/applications/system-tools/cloudcmd"}},d={},c=[{value:"Usage",id:"usage",level:2}];function l(e){const s={a:"a",code:"code",h2:"h2",li:"li",ol:"ol",p:"p",ul:"ul",...(0,i.a)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsxs)(s.p,{children:["Homepage: ",(0,t.jsx)(s.a,{href:"http://www.apcupsd.org/",children:"http://www.apcupsd.org/"})]}),"\n",(0,t.jsx)(s.p,{children:"A daemon that manages and monitors a Connected APC UPS Device, which has the ability to gracefully shut down the host computer in the event of a power outage."}),"\n",(0,t.jsx)(s.h2,{id:"usage",children:"Usage"}),"\n",(0,t.jsxs)(s.ol,{children:["\n",(0,t.jsxs)(s.li,{children:["Set ",(0,t.jsx)(s.code,{children:"apcupsd_enabled: true"})," in your ",(0,t.jsx)(s.code,{children:"inventories/<your_inventory>/nas.yml"})," file"]}),"\n",(0,t.jsxs)(s.li,{children:["Set ",(0,t.jsx)(s.code,{children:"apcupsd_device"})," variable to connected UPS device path (e.g ",(0,t.jsx)(s.code,{children:'apcupsd_device: "/dev/usb/hiddev0"'}),") in your ",(0,t.jsx)(s.code,{children:"inventories/<your_inventory>/nas.yml"})," file."]}),"\n"]}),"\n",(0,t.jsxs)(s.p,{children:["In addition, the following parameters can be overridden  in your ",(0,t.jsx)(s.code,{children:"inventories/<your_inventory>/nas.yml"})," file:"]}),"\n",(0,t.jsxs)(s.ul,{children:["\n",(0,t.jsxs)(s.li,{children:[(0,t.jsx)(s.code,{children:"apcupsd_onbatterydelay"})," - the time in seconds from when a power failure is detected until we react to it with an onbattery event"]}),"\n",(0,t.jsxs)(s.li,{children:[(0,t.jsx)(s.code,{children:"apcupsd_batterylevel"})," - if during a power failure, the remaining battery percentage is below or equal to BATTERYLEVEL, apcupsd will initiate a system shutdown"]}),"\n",(0,t.jsxs)(s.li,{children:[(0,t.jsx)(s.code,{children:"apcupsd_minutes"})," - if during a power failure, the remaining runtime in minutes is below or equal to MINUTES, apcupsd, will initiate a system shutdown"]}),"\n",(0,t.jsxs)(s.li,{children:[(0,t.jsx)(s.code,{children:"apcupsd_timeout"})," - if during a power failure, the UPS has run on batteries for TIMEOUT many seconds or longer, apcupsd will initiate a system shutdown. A value of 0 disables this timer"]}),"\n",(0,t.jsxs)(s.li,{children:[(0,t.jsx)(s.code,{children:"apcupsd_annoy"})," - time in seconds between annoying users to signoff prior to system shutdown. 0 disables"]}),"\n",(0,t.jsxs)(s.li,{children:[(0,t.jsx)(s.code,{children:"apcupsd_annoydelay"})," - initial delay after power failure before warning users to get off the system"]}),"\n",(0,t.jsxs)(s.li,{children:[(0,t.jsx)(s.code,{children:"apcupsd_nologon"})," - the condition which determines when users are prevented from logging in during a power failure. Possible values: [",(0,t.jsx)(s.code,{children:"disable"})," | ",(0,t.jsx)(s.code,{children:"timeout"})," | ",(0,t.jsx)(s.code,{children:"percent"})," | ",(0,t.jsx)(s.code,{children:"minutes"})," | ",(0,t.jsx)(s.code,{children:"always"}),"]"]}),"\n",(0,t.jsxs)(s.li,{children:[(0,t.jsx)(s.code,{children:"apcupsd_killdelay"})," - if KILLDELAY is non-zero, apcupsd will continue running after a shutdown has been requested, and after the specified time in seconds attempt to kill the power. This is for use on systems where apcupsd cannot regain control after a shutdown"]}),"\n"]}),"\n",(0,t.jsx)(s.p,{children:"Apcupsd's exposed netserver default port is 3551, which can be used to collect UPS events and data."})]})}function p(e={}){const{wrapper:s}={...(0,i.a)(),...e.components};return s?(0,t.jsx)(s,{...e,children:(0,t.jsx)(l,{...e})}):l(e)}},1151:(e,s,n)=>{n.d(s,{Z:()=>r,a:()=>a});var t=n(7294);const i={},o=t.createContext(i);function a(e){const s=t.useContext(o);return t.useMemo((function(){return"function"==typeof e?e(s):{...s,...e}}),[s,e])}function r(e){let s;return s=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:a(e.components),t.createElement(o.Provider,{value:s},e.children)}}}]);